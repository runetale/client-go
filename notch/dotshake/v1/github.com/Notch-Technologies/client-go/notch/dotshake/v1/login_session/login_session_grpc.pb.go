// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: notch/dotshake/v1/login_session.proto

package login_session

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginSessionServiceClient is the client API for LoginSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginSessionServiceClient interface {
	// dotshakeクライアントからStream接続を行い立ち上げ完了を受け取る
	StreamPeerLoginSession(ctx context.Context, opts ...grpc.CallOption) (LoginSessionService_StreamPeerLoginSessionClient, error)
}

type loginSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginSessionServiceClient(cc grpc.ClientConnInterface) LoginSessionServiceClient {
	return &loginSessionServiceClient{cc}
}

func (c *loginSessionServiceClient) StreamPeerLoginSession(ctx context.Context, opts ...grpc.CallOption) (LoginSessionService_StreamPeerLoginSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &LoginSessionService_ServiceDesc.Streams[0], "/protos.LoginSessionService/StreamPeerLoginSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &loginSessionServiceStreamPeerLoginSessionClient{stream}
	return x, nil
}

type LoginSessionService_StreamPeerLoginSessionClient interface {
	Send(*emptypb.Empty) error
	Recv() (*PeerLoginSessionResponse, error)
	grpc.ClientStream
}

type loginSessionServiceStreamPeerLoginSessionClient struct {
	grpc.ClientStream
}

func (x *loginSessionServiceStreamPeerLoginSessionClient) Send(m *emptypb.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loginSessionServiceStreamPeerLoginSessionClient) Recv() (*PeerLoginSessionResponse, error) {
	m := new(PeerLoginSessionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoginSessionServiceServer is the server API for LoginSessionService service.
// All implementations should embed UnimplementedLoginSessionServiceServer
// for forward compatibility
type LoginSessionServiceServer interface {
	// dotshakeクライアントからStream接続を行い立ち上げ完了を受け取る
	StreamPeerLoginSession(LoginSessionService_StreamPeerLoginSessionServer) error
}

// UnimplementedLoginSessionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLoginSessionServiceServer struct {
}

func (UnimplementedLoginSessionServiceServer) StreamPeerLoginSession(LoginSessionService_StreamPeerLoginSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPeerLoginSession not implemented")
}

// UnsafeLoginSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginSessionServiceServer will
// result in compilation errors.
type UnsafeLoginSessionServiceServer interface {
	mustEmbedUnimplementedLoginSessionServiceServer()
}

func RegisterLoginSessionServiceServer(s grpc.ServiceRegistrar, srv LoginSessionServiceServer) {
	s.RegisterService(&LoginSessionService_ServiceDesc, srv)
}

func _LoginSessionService_StreamPeerLoginSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoginSessionServiceServer).StreamPeerLoginSession(&loginSessionServiceStreamPeerLoginSessionServer{stream})
}

type LoginSessionService_StreamPeerLoginSessionServer interface {
	Send(*PeerLoginSessionResponse) error
	Recv() (*emptypb.Empty, error)
	grpc.ServerStream
}

type loginSessionServiceStreamPeerLoginSessionServer struct {
	grpc.ServerStream
}

func (x *loginSessionServiceStreamPeerLoginSessionServer) Send(m *PeerLoginSessionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loginSessionServiceStreamPeerLoginSessionServer) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoginSessionService_ServiceDesc is the grpc.ServiceDesc for LoginSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.LoginSessionService",
	HandlerType: (*LoginSessionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPeerLoginSession",
			Handler:       _LoginSessionService_StreamPeerLoginSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "notch/dotshake/v1/login_session.proto",
}
