// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: notch/dotshake/v1/session.proto

package session

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionServiceClient is the client API for SessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionServiceClient interface {
	// Auth0ログイン後、/adminにリダイレクトした時に叩かれる
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// /adminにリダイレクトし、SignInのRPCを叩いた後にdotshake側で叩くRPC
	// Webからログインせずにdotshakeから直接叩く場合(ユーザーがまだ作られていない場合)はユーザーの作成、つまりSignInを行う
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	// dotshakeのpeerの立ち上げが完了した時に叩くdotshake側で叩くRPC
	CompletePeerUp(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PeerUpCompleteResponse, error)
	// webでStream接続しておいて立ち上げ完了を受け取る
	StreamCompleteUp(ctx context.Context, opts ...grpc.CallOption) (SessionService_StreamCompleteUpClient, error)
}

type sessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionServiceClient(cc grpc.ClientConnInterface) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/protos.SessionService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/protos.SessionService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) CompletePeerUp(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PeerUpCompleteResponse, error) {
	out := new(PeerUpCompleteResponse)
	err := c.cc.Invoke(ctx, "/protos.SessionService/CompletePeerUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) StreamCompleteUp(ctx context.Context, opts ...grpc.CallOption) (SessionService_StreamCompleteUpClient, error) {
	stream, err := c.cc.NewStream(ctx, &SessionService_ServiceDesc.Streams[0], "/protos.SessionService/StreamCompleteUp", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionServiceStreamCompleteUpClient{stream}
	return x, nil
}

type SessionService_StreamCompleteUpClient interface {
	Send(*emptypb.Empty) error
	Recv() (*PeerUpCompleteResponse, error)
	grpc.ClientStream
}

type sessionServiceStreamCompleteUpClient struct {
	grpc.ClientStream
}

func (x *sessionServiceStreamCompleteUpClient) Send(m *emptypb.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sessionServiceStreamCompleteUpClient) Recv() (*PeerUpCompleteResponse, error) {
	m := new(PeerUpCompleteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SessionServiceServer is the server API for SessionService service.
// All implementations should embed UnimplementedSessionServiceServer
// for forward compatibility
type SessionServiceServer interface {
	// Auth0ログイン後、/adminにリダイレクトした時に叩かれる
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	// /adminにリダイレクトし、SignInのRPCを叩いた後にdotshake側で叩くRPC
	// Webからログインせずにdotshakeから直接叩く場合(ユーザーがまだ作られていない場合)はユーザーの作成、つまりSignInを行う
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	// dotshakeのpeerの立ち上げが完了した時に叩くdotshake側で叩くRPC
	CompletePeerUp(context.Context, *emptypb.Empty) (*PeerUpCompleteResponse, error)
	// webでStream接続しておいて立ち上げ完了を受け取る
	StreamCompleteUp(SessionService_StreamCompleteUpServer) error
}

// UnimplementedSessionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSessionServiceServer struct {
}

func (UnimplementedSessionServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedSessionServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedSessionServiceServer) CompletePeerUp(context.Context, *emptypb.Empty) (*PeerUpCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePeerUp not implemented")
}
func (UnimplementedSessionServiceServer) StreamCompleteUp(SessionService_StreamCompleteUpServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCompleteUp not implemented")
}

// UnsafeSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServiceServer will
// result in compilation errors.
type UnsafeSessionServiceServer interface {
	mustEmbedUnimplementedSessionServiceServer()
}

func RegisterSessionServiceServer(s grpc.ServiceRegistrar, srv SessionServiceServer) {
	s.RegisterService(&SessionService_ServiceDesc, srv)
}

func _SessionService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.SessionService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.SessionService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_CompletePeerUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).CompletePeerUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.SessionService/CompletePeerUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).CompletePeerUp(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_StreamCompleteUp_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SessionServiceServer).StreamCompleteUp(&sessionServiceStreamCompleteUpServer{stream})
}

type SessionService_StreamCompleteUpServer interface {
	Send(*PeerUpCompleteResponse) error
	Recv() (*emptypb.Empty, error)
	grpc.ServerStream
}

type sessionServiceStreamCompleteUpServer struct {
	grpc.ServerStream
}

func (x *sessionServiceStreamCompleteUpServer) Send(m *PeerUpCompleteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sessionServiceStreamCompleteUpServer) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SessionService_ServiceDesc is the grpc.ServiceDesc for SessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _SessionService_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _SessionService_SignUp_Handler,
		},
		{
			MethodName: "CompletePeerUp",
			Handler:    _SessionService_CompletePeerUp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCompleteUp",
			Handler:       _SessionService_StreamCompleteUp_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "notch/dotshake/v1/session.proto",
}
