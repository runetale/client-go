// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.2
// source: notch/dotshake/v1/daemon.proto

package daemon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DaemonServiceClient is the client API for DaemonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonServiceClient interface {
	GetConnectionStatus(ctx context.Context, opts ...grpc.CallOption) (DaemonService_GetConnectionStatusClient, error)
}

type daemonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonServiceClient(cc grpc.ClientConnInterface) DaemonServiceClient {
	return &daemonServiceClient{cc}
}

func (c *daemonServiceClient) GetConnectionStatus(ctx context.Context, opts ...grpc.CallOption) (DaemonService_GetConnectionStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &DaemonService_ServiceDesc.Streams[0], "/protos.DaemonService/GetConnectionStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &daemonServiceGetConnectionStatusClient{stream}
	return x, nil
}

type DaemonService_GetConnectionStatusClient interface {
	Send(*DaemonServiceRequest) error
	Recv() (*GetConnectionStatusResponse, error)
	grpc.ClientStream
}

type daemonServiceGetConnectionStatusClient struct {
	grpc.ClientStream
}

func (x *daemonServiceGetConnectionStatusClient) Send(m *DaemonServiceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *daemonServiceGetConnectionStatusClient) Recv() (*GetConnectionStatusResponse, error) {
	m := new(GetConnectionStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DaemonServiceServer is the server API for DaemonService service.
// All implementations should embed UnimplementedDaemonServiceServer
// for forward compatibility
type DaemonServiceServer interface {
	GetConnectionStatus(DaemonService_GetConnectionStatusServer) error
}

// UnimplementedDaemonServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDaemonServiceServer struct {
}

func (UnimplementedDaemonServiceServer) GetConnectionStatus(DaemonService_GetConnectionStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConnectionStatus not implemented")
}

// UnsafeDaemonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaemonServiceServer will
// result in compilation errors.
type UnsafeDaemonServiceServer interface {
	mustEmbedUnimplementedDaemonServiceServer()
}

func RegisterDaemonServiceServer(s grpc.ServiceRegistrar, srv DaemonServiceServer) {
	s.RegisterService(&DaemonService_ServiceDesc, srv)
}

func _DaemonService_GetConnectionStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DaemonServiceServer).GetConnectionStatus(&daemonServiceGetConnectionStatusServer{stream})
}

type DaemonService_GetConnectionStatusServer interface {
	Send(*GetConnectionStatusResponse) error
	Recv() (*DaemonServiceRequest, error)
	grpc.ServerStream
}

type daemonServiceGetConnectionStatusServer struct {
	grpc.ServerStream
}

func (x *daemonServiceGetConnectionStatusServer) Send(m *GetConnectionStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *daemonServiceGetConnectionStatusServer) Recv() (*DaemonServiceRequest, error) {
	m := new(DaemonServiceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DaemonService_ServiceDesc is the grpc.ServiceDesc for DaemonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DaemonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.DaemonService",
	HandlerType: (*DaemonServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetConnectionStatus",
			Handler:       _DaemonService_GetConnectionStatus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "notch/dotshake/v1/daemon.proto",
}
