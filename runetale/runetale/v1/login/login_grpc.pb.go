// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.20.3
// source: runetale/runetale/v1/login.proto

package login

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LoginService_LoginNode_FullMethodName     = "/protos.LoginService/LoginNode"
	LoginService_LoginSession_FullMethodName  = "/protos.LoginService/LoginSession"
	LoginService_GetInvitation_FullMethodName = "/protos.LoginService/GetInvitation"
)

// LoginServiceClient is the client API for LoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginServiceClient interface {
	LoginNode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoginNodeResponse, error)
	LoginSession(ctx context.Context, opts ...grpc.CallOption) (LoginService_LoginSessionClient, error)
	GetInvitation(ctx context.Context, in *GetInvitationRequest, opts ...grpc.CallOption) (*GetInvitationResponse, error)
}

type loginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginServiceClient(cc grpc.ClientConnInterface) LoginServiceClient {
	return &loginServiceClient{cc}
}

func (c *loginServiceClient) LoginNode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoginNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginNodeResponse)
	err := c.cc.Invoke(ctx, LoginService_LoginNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) LoginSession(ctx context.Context, opts ...grpc.CallOption) (LoginService_LoginSessionClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LoginService_ServiceDesc.Streams[0], LoginService_LoginSession_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &loginServiceLoginSessionClient{ClientStream: stream}
	return x, nil
}

type LoginService_LoginSessionClient interface {
	Send(*emptypb.Empty) error
	Recv() (*LoginSessionResponse, error)
	grpc.ClientStream
}

type loginServiceLoginSessionClient struct {
	grpc.ClientStream
}

func (x *loginServiceLoginSessionClient) Send(m *emptypb.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loginServiceLoginSessionClient) Recv() (*LoginSessionResponse, error) {
	m := new(LoginSessionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loginServiceClient) GetInvitation(ctx context.Context, in *GetInvitationRequest, opts ...grpc.CallOption) (*GetInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvitationResponse)
	err := c.cc.Invoke(ctx, LoginService_GetInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginServiceServer is the server API for LoginService service.
// All implementations should embed UnimplementedLoginServiceServer
// for forward compatibility
type LoginServiceServer interface {
	LoginNode(context.Context, *emptypb.Empty) (*LoginNodeResponse, error)
	LoginSession(LoginService_LoginSessionServer) error
	GetInvitation(context.Context, *GetInvitationRequest) (*GetInvitationResponse, error)
}

// UnimplementedLoginServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLoginServiceServer struct {
}

func (UnimplementedLoginServiceServer) LoginNode(context.Context, *emptypb.Empty) (*LoginNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginNode not implemented")
}
func (UnimplementedLoginServiceServer) LoginSession(LoginService_LoginSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method LoginSession not implemented")
}
func (UnimplementedLoginServiceServer) GetInvitation(context.Context, *GetInvitationRequest) (*GetInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitation not implemented")
}

// UnsafeLoginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginServiceServer will
// result in compilation errors.
type UnsafeLoginServiceServer interface {
	mustEmbedUnimplementedLoginServiceServer()
}

func RegisterLoginServiceServer(s grpc.ServiceRegistrar, srv LoginServiceServer) {
	s.RegisterService(&LoginService_ServiceDesc, srv)
}

func _LoginService_LoginNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).LoginNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginService_LoginNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).LoginNode(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_LoginSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoginServiceServer).LoginSession(&loginServiceLoginSessionServer{ServerStream: stream})
}

type LoginService_LoginSessionServer interface {
	Send(*LoginSessionResponse) error
	Recv() (*emptypb.Empty, error)
	grpc.ServerStream
}

type loginServiceLoginSessionServer struct {
	grpc.ServerStream
}

func (x *loginServiceLoginSessionServer) Send(m *LoginSessionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loginServiceLoginSessionServer) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LoginService_GetInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).GetInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginService_GetInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).GetInvitation(ctx, req.(*GetInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginService_ServiceDesc is the grpc.ServiceDesc for LoginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.LoginService",
	HandlerType: (*LoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginNode",
			Handler:    _LoginService_LoginNode_Handler,
		},
		{
			MethodName: "GetInvitation",
			Handler:    _LoginService_GetInvitation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoginSession",
			Handler:       _LoginService_LoginSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "runetale/runetale/v1/login.proto",
}
