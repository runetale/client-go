// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: runetale/runetale/v1/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AclService_CreateAcl_FullMethodName = "/protos.AclService/CreateAcl"
	AclService_PatchAcl_FullMethodName  = "/protos.AclService/PatchAcl"
	AclService_GetAcl_FullMethodName    = "/protos.AclService/GetAcl"
	AclService_GetAcls_FullMethodName   = "/protos.AclService/GetAcls"
)

// AclServiceClient is the client API for AclService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AclServiceClient interface {
	CreateAcl(ctx context.Context, in *CreateAclRequest, opts ...grpc.CallOption) (*AclResponse, error)
	PatchAcl(ctx context.Context, in *PatchAclRequest, opts ...grpc.CallOption) (*AclResponse, error)
	GetAcl(ctx context.Context, in *GetAclRequest, opts ...grpc.CallOption) (*AclResponse, error)
	GetAcls(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAclsResponse, error)
}

type aclServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAclServiceClient(cc grpc.ClientConnInterface) AclServiceClient {
	return &aclServiceClient{cc}
}

func (c *aclServiceClient) CreateAcl(ctx context.Context, in *CreateAclRequest, opts ...grpc.CallOption) (*AclResponse, error) {
	out := new(AclResponse)
	err := c.cc.Invoke(ctx, AclService_CreateAcl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) PatchAcl(ctx context.Context, in *PatchAclRequest, opts ...grpc.CallOption) (*AclResponse, error) {
	out := new(AclResponse)
	err := c.cc.Invoke(ctx, AclService_PatchAcl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) GetAcl(ctx context.Context, in *GetAclRequest, opts ...grpc.CallOption) (*AclResponse, error) {
	out := new(AclResponse)
	err := c.cc.Invoke(ctx, AclService_GetAcl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) GetAcls(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAclsResponse, error) {
	out := new(GetAclsResponse)
	err := c.cc.Invoke(ctx, AclService_GetAcls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AclServiceServer is the server API for AclService service.
// All implementations should embed UnimplementedAclServiceServer
// for forward compatibility
type AclServiceServer interface {
	CreateAcl(context.Context, *CreateAclRequest) (*AclResponse, error)
	PatchAcl(context.Context, *PatchAclRequest) (*AclResponse, error)
	GetAcl(context.Context, *GetAclRequest) (*AclResponse, error)
	GetAcls(context.Context, *emptypb.Empty) (*GetAclsResponse, error)
}

// UnimplementedAclServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAclServiceServer struct {
}

func (UnimplementedAclServiceServer) CreateAcl(context.Context, *CreateAclRequest) (*AclResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAcl not implemented")
}
func (UnimplementedAclServiceServer) PatchAcl(context.Context, *PatchAclRequest) (*AclResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAcl not implemented")
}
func (UnimplementedAclServiceServer) GetAcl(context.Context, *GetAclRequest) (*AclResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcl not implemented")
}
func (UnimplementedAclServiceServer) GetAcls(context.Context, *emptypb.Empty) (*GetAclsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcls not implemented")
}

// UnsafeAclServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AclServiceServer will
// result in compilation errors.
type UnsafeAclServiceServer interface {
	mustEmbedUnimplementedAclServiceServer()
}

func RegisterAclServiceServer(s grpc.ServiceRegistrar, srv AclServiceServer) {
	s.RegisterService(&AclService_ServiceDesc, srv)
}

func _AclService_CreateAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).CreateAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_CreateAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).CreateAcl(ctx, req.(*CreateAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_PatchAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).PatchAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_PatchAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).PatchAcl(ctx, req.(*PatchAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_GetAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).GetAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_GetAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).GetAcl(ctx, req.(*GetAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_GetAcls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).GetAcls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_GetAcls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).GetAcls(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AclService_ServiceDesc is the grpc.ServiceDesc for AclService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AclService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.AclService",
	HandlerType: (*AclServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAcl",
			Handler:    _AclService_CreateAcl_Handler,
		},
		{
			MethodName: "PatchAcl",
			Handler:    _AclService_PatchAcl_Handler,
		},
		{
			MethodName: "GetAcl",
			Handler:    _AclService_GetAcl_Handler,
		},
		{
			MethodName: "GetAcls",
			Handler:    _AclService_GetAcls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runetale/runetale/v1/admin.proto",
}

const (
	UserService_GetMe_FullMethodName    = "/protos.UserService/GetMe"
	UserService_GetUser_FullMethodName  = "/protos.UserService/GetUser"
	UserService_GetUsers_FullMethodName = "/protos.UserService/GetUsers"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetMe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMeResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Users, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetMe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMeResponse, error) {
	out := new(GetMeResponse)
	err := c.cc.Invoke(ctx, UserService_GetMe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, UserService_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetMe(context.Context, *emptypb.Empty) (*GetMeResponse, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	GetUsers(context.Context, *emptypb.Empty) (*Users, error)
}

// UnimplementedUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetMe(context.Context, *emptypb.Empty) (*GetMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) GetUsers(context.Context, *emptypb.Empty) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMe(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMe",
			Handler:    _UserService_GetMe_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runetale/runetale/v1/admin.proto",
}

const (
	UserDetailService_AddNewDstsForUser_FullMethodName = "/protos.UserDetailService/AddNewDstsForUser"
	UserDetailService_AddGroups_FullMethodName         = "/protos.UserDetailService/AddGroups"
)

// UserDetailServiceClient is the client API for UserDetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDetailServiceClient interface {
	AddNewDstsForUser(ctx context.Context, in *AddNewDstsForUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddGroups(ctx context.Context, in *AddGroupsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userDetailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDetailServiceClient(cc grpc.ClientConnInterface) UserDetailServiceClient {
	return &userDetailServiceClient{cc}
}

func (c *userDetailServiceClient) AddNewDstsForUser(ctx context.Context, in *AddNewDstsForUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserDetailService_AddNewDstsForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDetailServiceClient) AddGroups(ctx context.Context, in *AddGroupsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserDetailService_AddGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDetailServiceServer is the server API for UserDetailService service.
// All implementations should embed UnimplementedUserDetailServiceServer
// for forward compatibility
type UserDetailServiceServer interface {
	AddNewDstsForUser(context.Context, *AddNewDstsForUserRequest) (*emptypb.Empty, error)
	AddGroups(context.Context, *AddGroupsRequest) (*emptypb.Empty, error)
}

// UnimplementedUserDetailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserDetailServiceServer struct {
}

func (UnimplementedUserDetailServiceServer) AddNewDstsForUser(context.Context, *AddNewDstsForUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewDstsForUser not implemented")
}
func (UnimplementedUserDetailServiceServer) AddGroups(context.Context, *AddGroupsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroups not implemented")
}

// UnsafeUserDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDetailServiceServer will
// result in compilation errors.
type UnsafeUserDetailServiceServer interface {
	mustEmbedUnimplementedUserDetailServiceServer()
}

func RegisterUserDetailServiceServer(s grpc.ServiceRegistrar, srv UserDetailServiceServer) {
	s.RegisterService(&UserDetailService_ServiceDesc, srv)
}

func _UserDetailService_AddNewDstsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewDstsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDetailServiceServer).AddNewDstsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDetailService_AddNewDstsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDetailServiceServer).AddNewDstsForUser(ctx, req.(*AddNewDstsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDetailService_AddGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDetailServiceServer).AddGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDetailService_AddGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDetailServiceServer).AddGroups(ctx, req.(*AddGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDetailService_ServiceDesc is the grpc.ServiceDesc for UserDetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.UserDetailService",
	HandlerType: (*UserDetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewDstsForUser",
			Handler:    _UserDetailService_AddNewDstsForUser_Handler,
		},
		{
			MethodName: "AddGroups",
			Handler:    _UserDetailService_AddGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runetale/runetale/v1/admin.proto",
}

const (
	GroupService_CreateGroup_FullMethodName = "/protos.GroupService/CreateGroup"
	GroupService_PatchGroup_FullMethodName  = "/protos.GroupService/PatchGroup"
	GroupService_GetGroup_FullMethodName    = "/protos.GroupService/GetGroup"
	GroupService_GetGroups_FullMethodName   = "/protos.GroupService/GetGroups"
)

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupServiceClient interface {
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error)
	PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*Group, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error)
	GetGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Groups, error)
}

type groupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, GroupService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, GroupService_PatchGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, GroupService_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := c.cc.Invoke(ctx, GroupService_GetGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
// All implementations should embed UnimplementedGroupServiceServer
// for forward compatibility
type GroupServiceServer interface {
	CreateGroup(context.Context, *CreateGroupRequest) (*Group, error)
	PatchGroup(context.Context, *PatchGroupRequest) (*Group, error)
	GetGroup(context.Context, *GetGroupRequest) (*Group, error)
	GetGroups(context.Context, *emptypb.Empty) (*Groups, error)
}

// UnimplementedGroupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGroupServiceServer struct {
}

func (UnimplementedGroupServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupServiceServer) PatchGroup(context.Context, *PatchGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchGroup not implemented")
}
func (UnimplementedGroupServiceServer) GetGroup(context.Context, *GetGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupServiceServer) GetGroups(context.Context, *emptypb.Empty) (*Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}

// UnsafeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServiceServer will
// result in compilation errors.
type UnsafeGroupServiceServer interface {
	mustEmbedUnimplementedGroupServiceServer()
}

func RegisterGroupServiceServer(s grpc.ServiceRegistrar, srv GroupServiceServer) {
	s.RegisterService(&GroupService_ServiceDesc, srv)
}

func _GroupService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_PatchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).PatchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_PatchGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).PatchGroup(ctx, req.(*PatchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroups(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupService_ServiceDesc is the grpc.ServiceDesc for GroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupService_CreateGroup_Handler,
		},
		{
			MethodName: "PatchGroup",
			Handler:    _GroupService_PatchGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _GroupService_GetGroup_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _GroupService_GetGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runetale/runetale/v1/admin.proto",
}

const (
	GroupDetailService_AddNewDstForGroup_FullMethodName = "/protos.GroupDetailService/AddNewDstForGroup"
)

// GroupDetailServiceClient is the client API for GroupDetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupDetailServiceClient interface {
	AddNewDstForGroup(ctx context.Context, in *AddNewDstForGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type groupDetailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupDetailServiceClient(cc grpc.ClientConnInterface) GroupDetailServiceClient {
	return &groupDetailServiceClient{cc}
}

func (c *groupDetailServiceClient) AddNewDstForGroup(ctx context.Context, in *AddNewDstForGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupDetailService_AddNewDstForGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupDetailServiceServer is the server API for GroupDetailService service.
// All implementations should embed UnimplementedGroupDetailServiceServer
// for forward compatibility
type GroupDetailServiceServer interface {
	AddNewDstForGroup(context.Context, *AddNewDstForGroupRequest) (*emptypb.Empty, error)
}

// UnimplementedGroupDetailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGroupDetailServiceServer struct {
}

func (UnimplementedGroupDetailServiceServer) AddNewDstForGroup(context.Context, *AddNewDstForGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewDstForGroup not implemented")
}

// UnsafeGroupDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupDetailServiceServer will
// result in compilation errors.
type UnsafeGroupDetailServiceServer interface {
	mustEmbedUnimplementedGroupDetailServiceServer()
}

func RegisterGroupDetailServiceServer(s grpc.ServiceRegistrar, srv GroupDetailServiceServer) {
	s.RegisterService(&GroupDetailService_ServiceDesc, srv)
}

func _GroupDetailService_AddNewDstForGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewDstForGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupDetailServiceServer).AddNewDstForGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupDetailService_AddNewDstForGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupDetailServiceServer).AddNewDstForGroup(ctx, req.(*AddNewDstForGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupDetailService_ServiceDesc is the grpc.ServiceDesc for GroupDetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupDetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GroupDetailService",
	HandlerType: (*GroupDetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewDstForGroup",
			Handler:    _GroupDetailService_AddNewDstForGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runetale/runetale/v1/admin.proto",
}

const (
	DeviceService_GetDevice_FullMethodName  = "/protos.DeviceService/GetDevice"
	DeviceService_GetDevices_FullMethodName = "/protos.DeviceService/GetDevices"
)

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	GetDevice(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*Device, error)
	GetDevices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Devices, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) GetDevice(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, DeviceService_GetDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDevices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Devices, error) {
	out := new(Devices)
	err := c.cc.Invoke(ctx, DeviceService_GetDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations should embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	GetDevice(context.Context, *GetDevicesRequest) (*Device, error)
	GetDevices(context.Context, *emptypb.Empty) (*Devices, error)
}

// UnimplementedDeviceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) GetDevice(context.Context, *GetDevicesRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDeviceServiceServer) GetDevices(context.Context, *emptypb.Empty) (*Devices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDevice(ctx, req.(*GetDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDevices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevice",
			Handler:    _DeviceService_GetDevice_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _DeviceService_GetDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runetale/runetale/v1/admin.proto",
}

const (
	ResourceService_CreateResource_FullMethodName = "/protos.ResourceService/CreateResource"
	ResourceService_GenerateToken_FullMethodName  = "/protos.ResourceService/GenerateToken"
	ResourceService_PatchResource_FullMethodName  = "/protos.ResourceService/PatchResource"
	ResourceService_GetResource_FullMethodName    = "/protos.ResourceService/GetResource"
	ResourceService_GetResources_FullMethodName   = "/protos.ResourceService/GetResources"
)

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceServiceClient interface {
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error)
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	PatchResource(ctx context.Context, in *PatchResourceRequest, opts ...grpc.CallOption) (*Resource, error)
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*Resource, error)
	GetResources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Resources, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error) {
	out := new(CreateResourceResponse)
	err := c.cc.Invoke(ctx, ResourceService_CreateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, ResourceService_GenerateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) PatchResource(ctx context.Context, in *PatchResourceRequest, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, ResourceService_PatchResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, ResourceService_GetResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Resources, error) {
	out := new(Resources)
	err := c.cc.Invoke(ctx, ResourceService_GetResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServiceServer is the server API for ResourceService service.
// All implementations should embed UnimplementedResourceServiceServer
// for forward compatibility
type ResourceServiceServer interface {
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	PatchResource(context.Context, *PatchResourceRequest) (*Resource, error)
	GetResource(context.Context, *GetResourceRequest) (*Resource, error)
	GetResources(context.Context, *emptypb.Empty) (*Resources, error)
}

// UnimplementedResourceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedResourceServiceServer struct {
}

func (UnimplementedResourceServiceServer) CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedResourceServiceServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedResourceServiceServer) PatchResource(context.Context, *PatchResourceRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchResource not implemented")
}
func (UnimplementedResourceServiceServer) GetResource(context.Context, *GetResourceRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedResourceServiceServer) GetResources(context.Context, *emptypb.Empty) (*Resources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}

// UnsafeResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServiceServer will
// result in compilation errors.
type UnsafeResourceServiceServer interface {
	mustEmbedUnimplementedResourceServiceServer()
}

func RegisterResourceServiceServer(s grpc.ServiceRegistrar, srv ResourceServiceServer) {
	s.RegisterService(&ResourceService_ServiceDesc, srv)
}

func _ResourceService_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_PatchResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).PatchResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_PatchResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).PatchResource(ctx, req.(*PatchResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResources(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceService_ServiceDesc is the grpc.ServiceDesc for ResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResource",
			Handler:    _ResourceService_CreateResource_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _ResourceService_GenerateToken_Handler,
		},
		{
			MethodName: "PatchResource",
			Handler:    _ResourceService_PatchResource_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ResourceService_GetResource_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _ResourceService_GetResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runetale/runetale/v1/admin.proto",
}

const (
	ResourceDetailService_AddNewSrcsForResource_FullMethodName = "/protos.ResourceDetailService/AddNewSrcsForResource"
	ResourceDetailService_AddFleets_FullMethodName             = "/protos.ResourceDetailService/AddFleets"
)

// ResourceDetailServiceClient is the client API for ResourceDetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceDetailServiceClient interface {
	AddNewSrcsForResource(ctx context.Context, in *AddNewSrcsForResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddFleets(ctx context.Context, in *AddFleetsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type resourceDetailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceDetailServiceClient(cc grpc.ClientConnInterface) ResourceDetailServiceClient {
	return &resourceDetailServiceClient{cc}
}

func (c *resourceDetailServiceClient) AddNewSrcsForResource(ctx context.Context, in *AddNewSrcsForResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ResourceDetailService_AddNewSrcsForResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceDetailServiceClient) AddFleets(ctx context.Context, in *AddFleetsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ResourceDetailService_AddFleets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceDetailServiceServer is the server API for ResourceDetailService service.
// All implementations should embed UnimplementedResourceDetailServiceServer
// for forward compatibility
type ResourceDetailServiceServer interface {
	AddNewSrcsForResource(context.Context, *AddNewSrcsForResourceRequest) (*emptypb.Empty, error)
	AddFleets(context.Context, *AddFleetsRequest) (*emptypb.Empty, error)
}

// UnimplementedResourceDetailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedResourceDetailServiceServer struct {
}

func (UnimplementedResourceDetailServiceServer) AddNewSrcsForResource(context.Context, *AddNewSrcsForResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewSrcsForResource not implemented")
}
func (UnimplementedResourceDetailServiceServer) AddFleets(context.Context, *AddFleetsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFleets not implemented")
}

// UnsafeResourceDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceDetailServiceServer will
// result in compilation errors.
type UnsafeResourceDetailServiceServer interface {
	mustEmbedUnimplementedResourceDetailServiceServer()
}

func RegisterResourceDetailServiceServer(s grpc.ServiceRegistrar, srv ResourceDetailServiceServer) {
	s.RegisterService(&ResourceDetailService_ServiceDesc, srv)
}

func _ResourceDetailService_AddNewSrcsForResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewSrcsForResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceDetailServiceServer).AddNewSrcsForResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceDetailService_AddNewSrcsForResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceDetailServiceServer).AddNewSrcsForResource(ctx, req.(*AddNewSrcsForResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceDetailService_AddFleets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFleetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceDetailServiceServer).AddFleets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceDetailService_AddFleets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceDetailServiceServer).AddFleets(ctx, req.(*AddFleetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceDetailService_ServiceDesc is the grpc.ServiceDesc for ResourceDetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceDetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ResourceDetailService",
	HandlerType: (*ResourceDetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewSrcsForResource",
			Handler:    _ResourceDetailService_AddNewSrcsForResource_Handler,
		},
		{
			MethodName: "AddFleets",
			Handler:    _ResourceDetailService_AddFleets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runetale/runetale/v1/admin.proto",
}

const (
	FleetService_CreateFleet_FullMethodName = "/protos.FleetService/CreateFleet"
	FleetService_PatchFleet_FullMethodName  = "/protos.FleetService/PatchFleet"
	FleetService_GetFleet_FullMethodName    = "/protos.FleetService/GetFleet"
	FleetService_GetFleets_FullMethodName   = "/protos.FleetService/GetFleets"
)

// FleetServiceClient is the client API for FleetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetServiceClient interface {
	CreateFleet(ctx context.Context, in *CreateFleetRequest, opts ...grpc.CallOption) (*Fleet, error)
	PatchFleet(ctx context.Context, in *PatchFleetRequest, opts ...grpc.CallOption) (*Fleet, error)
	GetFleet(ctx context.Context, in *GetFleetRequest, opts ...grpc.CallOption) (*Fleet, error)
	GetFleets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Fleets, error)
}

type fleetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetServiceClient(cc grpc.ClientConnInterface) FleetServiceClient {
	return &fleetServiceClient{cc}
}

func (c *fleetServiceClient) CreateFleet(ctx context.Context, in *CreateFleetRequest, opts ...grpc.CallOption) (*Fleet, error) {
	out := new(Fleet)
	err := c.cc.Invoke(ctx, FleetService_CreateFleet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetServiceClient) PatchFleet(ctx context.Context, in *PatchFleetRequest, opts ...grpc.CallOption) (*Fleet, error) {
	out := new(Fleet)
	err := c.cc.Invoke(ctx, FleetService_PatchFleet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetServiceClient) GetFleet(ctx context.Context, in *GetFleetRequest, opts ...grpc.CallOption) (*Fleet, error) {
	out := new(Fleet)
	err := c.cc.Invoke(ctx, FleetService_GetFleet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetServiceClient) GetFleets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Fleets, error) {
	out := new(Fleets)
	err := c.cc.Invoke(ctx, FleetService_GetFleets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetServiceServer is the server API for FleetService service.
// All implementations should embed UnimplementedFleetServiceServer
// for forward compatibility
type FleetServiceServer interface {
	CreateFleet(context.Context, *CreateFleetRequest) (*Fleet, error)
	PatchFleet(context.Context, *PatchFleetRequest) (*Fleet, error)
	GetFleet(context.Context, *GetFleetRequest) (*Fleet, error)
	GetFleets(context.Context, *emptypb.Empty) (*Fleets, error)
}

// UnimplementedFleetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFleetServiceServer struct {
}

func (UnimplementedFleetServiceServer) CreateFleet(context.Context, *CreateFleetRequest) (*Fleet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFleet not implemented")
}
func (UnimplementedFleetServiceServer) PatchFleet(context.Context, *PatchFleetRequest) (*Fleet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchFleet not implemented")
}
func (UnimplementedFleetServiceServer) GetFleet(context.Context, *GetFleetRequest) (*Fleet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFleet not implemented")
}
func (UnimplementedFleetServiceServer) GetFleets(context.Context, *emptypb.Empty) (*Fleets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFleets not implemented")
}

// UnsafeFleetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetServiceServer will
// result in compilation errors.
type UnsafeFleetServiceServer interface {
	mustEmbedUnimplementedFleetServiceServer()
}

func RegisterFleetServiceServer(s grpc.ServiceRegistrar, srv FleetServiceServer) {
	s.RegisterService(&FleetService_ServiceDesc, srv)
}

func _FleetService_CreateFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).CreateFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetService_CreateFleet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).CreateFleet(ctx, req.(*CreateFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetService_PatchFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).PatchFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetService_PatchFleet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).PatchFleet(ctx, req.(*PatchFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetService_GetFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).GetFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetService_GetFleet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).GetFleet(ctx, req.(*GetFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetService_GetFleets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).GetFleets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetService_GetFleets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).GetFleets(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FleetService_ServiceDesc is the grpc.ServiceDesc for FleetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FleetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.FleetService",
	HandlerType: (*FleetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFleet",
			Handler:    _FleetService_CreateFleet_Handler,
		},
		{
			MethodName: "PatchFleet",
			Handler:    _FleetService_PatchFleet_Handler,
		},
		{
			MethodName: "GetFleet",
			Handler:    _FleetService_GetFleet_Handler,
		},
		{
			MethodName: "GetFleets",
			Handler:    _FleetService_GetFleets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runetale/runetale/v1/admin.proto",
}

const (
	FleetDetailService_AddNewSrcsForFleet_FullMethodName = "/protos.FleetDetailService/AddNewSrcsForFleet"
)

// FleetDetailServiceClient is the client API for FleetDetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetDetailServiceClient interface {
	AddNewSrcsForFleet(ctx context.Context, in *AddNewSrcsForFleetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fleetDetailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetDetailServiceClient(cc grpc.ClientConnInterface) FleetDetailServiceClient {
	return &fleetDetailServiceClient{cc}
}

func (c *fleetDetailServiceClient) AddNewSrcsForFleet(ctx context.Context, in *AddNewSrcsForFleetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FleetDetailService_AddNewSrcsForFleet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetDetailServiceServer is the server API for FleetDetailService service.
// All implementations should embed UnimplementedFleetDetailServiceServer
// for forward compatibility
type FleetDetailServiceServer interface {
	AddNewSrcsForFleet(context.Context, *AddNewSrcsForFleetRequest) (*emptypb.Empty, error)
}

// UnimplementedFleetDetailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFleetDetailServiceServer struct {
}

func (UnimplementedFleetDetailServiceServer) AddNewSrcsForFleet(context.Context, *AddNewSrcsForFleetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewSrcsForFleet not implemented")
}

// UnsafeFleetDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetDetailServiceServer will
// result in compilation errors.
type UnsafeFleetDetailServiceServer interface {
	mustEmbedUnimplementedFleetDetailServiceServer()
}

func RegisterFleetDetailServiceServer(s grpc.ServiceRegistrar, srv FleetDetailServiceServer) {
	s.RegisterService(&FleetDetailService_ServiceDesc, srv)
}

func _FleetDetailService_AddNewSrcsForFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewSrcsForFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetDetailServiceServer).AddNewSrcsForFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetDetailService_AddNewSrcsForFleet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetDetailServiceServer).AddNewSrcsForFleet(ctx, req.(*AddNewSrcsForFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FleetDetailService_ServiceDesc is the grpc.ServiceDesc for FleetDetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FleetDetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.FleetDetailService",
	HandlerType: (*FleetDetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewSrcsForFleet",
			Handler:    _FleetDetailService_AddNewSrcsForFleet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runetale/runetale/v1/admin.proto",
}
