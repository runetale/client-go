// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: runetale/runetale/v1/hashi.proto

package hashi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HashiService_Status_FullMethodName       = "/protos.HashiService/Status"
	HashiService_Ping_FullMethodName         = "/protos.HashiService/Ping"
	HashiService_Login_FullMethodName        = "/protos.HashiService/Login"
	HashiService_Compose_FullMethodName      = "/protos.HashiService/Compose"
	HashiService_Logout_FullMethodName       = "/protos.HashiService/Logout"
	HashiService_Stop_FullMethodName         = "/protos.HashiService/Stop"
	HashiService_Dial_FullMethodName         = "/protos.HashiService/Dial"
	HashiService_GetHashigo_FullMethodName   = "/protos.HashiService/GetHashigo"
	HashiService_PatchHashigo_FullMethodName = "/protos.HashiService/PatchHashigo"
)

// HashiServiceClient is the client API for HashiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HashiServiceはRunetale Clientのバックエンド専用のAPI's
// hashilocalbackendのgrpc serviceとして実装されます
type HashiServiceClient interface {
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HashiStatus, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResult, error)
	Login(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HashiStatus, error)
	Compose(ctx context.Context, in *ComposeRequest, opts ...grpc.CallOption) (*HashiStatus, error)
	Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HashiStatus, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*HashiStatus, error)
	Dial(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HashiStatus, error)
	GetHashigo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Hashigo, error)
	PatchHashigo(ctx context.Context, in *HashigoConfigRequest, opts ...grpc.CallOption) (*Hashigo, error)
}

type hashiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashiServiceClient(cc grpc.ClientConnInterface) HashiServiceClient {
	return &hashiServiceClient{cc}
}

func (c *hashiServiceClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HashiStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HashiStatus)
	err := c.cc.Invoke(ctx, HashiService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashiServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResult)
	err := c.cc.Invoke(ctx, HashiService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashiServiceClient) Login(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HashiStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HashiStatus)
	err := c.cc.Invoke(ctx, HashiService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashiServiceClient) Compose(ctx context.Context, in *ComposeRequest, opts ...grpc.CallOption) (*HashiStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HashiStatus)
	err := c.cc.Invoke(ctx, HashiService_Compose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashiServiceClient) Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HashiStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HashiStatus)
	err := c.cc.Invoke(ctx, HashiService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashiServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*HashiStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HashiStatus)
	err := c.cc.Invoke(ctx, HashiService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashiServiceClient) Dial(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HashiStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HashiStatus)
	err := c.cc.Invoke(ctx, HashiService_Dial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashiServiceClient) GetHashigo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Hashigo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Hashigo)
	err := c.cc.Invoke(ctx, HashiService_GetHashigo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashiServiceClient) PatchHashigo(ctx context.Context, in *HashigoConfigRequest, opts ...grpc.CallOption) (*Hashigo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Hashigo)
	err := c.cc.Invoke(ctx, HashiService_PatchHashigo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashiServiceServer is the server API for HashiService service.
// All implementations should embed UnimplementedHashiServiceServer
// for forward compatibility.
//
// HashiServiceはRunetale Clientのバックエンド専用のAPI's
// hashilocalbackendのgrpc serviceとして実装されます
type HashiServiceServer interface {
	Status(context.Context, *emptypb.Empty) (*HashiStatus, error)
	Ping(context.Context, *PingRequest) (*PingResult, error)
	Login(context.Context, *emptypb.Empty) (*HashiStatus, error)
	Compose(context.Context, *ComposeRequest) (*HashiStatus, error)
	Logout(context.Context, *emptypb.Empty) (*HashiStatus, error)
	Stop(context.Context, *StopRequest) (*HashiStatus, error)
	Dial(context.Context, *emptypb.Empty) (*HashiStatus, error)
	GetHashigo(context.Context, *emptypb.Empty) (*Hashigo, error)
	PatchHashigo(context.Context, *HashigoConfigRequest) (*Hashigo, error)
}

// UnimplementedHashiServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHashiServiceServer struct{}

func (UnimplementedHashiServiceServer) Status(context.Context, *emptypb.Empty) (*HashiStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedHashiServiceServer) Ping(context.Context, *PingRequest) (*PingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHashiServiceServer) Login(context.Context, *emptypb.Empty) (*HashiStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedHashiServiceServer) Compose(context.Context, *ComposeRequest) (*HashiStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compose not implemented")
}
func (UnimplementedHashiServiceServer) Logout(context.Context, *emptypb.Empty) (*HashiStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedHashiServiceServer) Stop(context.Context, *StopRequest) (*HashiStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedHashiServiceServer) Dial(context.Context, *emptypb.Empty) (*HashiStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dial not implemented")
}
func (UnimplementedHashiServiceServer) GetHashigo(context.Context, *emptypb.Empty) (*Hashigo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashigo not implemented")
}
func (UnimplementedHashiServiceServer) PatchHashigo(context.Context, *HashigoConfigRequest) (*Hashigo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchHashigo not implemented")
}
func (UnimplementedHashiServiceServer) testEmbeddedByValue() {}

// UnsafeHashiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashiServiceServer will
// result in compilation errors.
type UnsafeHashiServiceServer interface {
	mustEmbedUnimplementedHashiServiceServer()
}

func RegisterHashiServiceServer(s grpc.ServiceRegistrar, srv HashiServiceServer) {
	// If the following call pancis, it indicates UnimplementedHashiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HashiService_ServiceDesc, srv)
}

func _HashiService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashiService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiServiceServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashiService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashiService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashiService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashiService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiServiceServer).Login(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashiService_Compose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiServiceServer).Compose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashiService_Compose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiServiceServer).Compose(ctx, req.(*ComposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashiService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashiService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiServiceServer).Logout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashiService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashiService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashiService_Dial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiServiceServer).Dial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashiService_Dial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiServiceServer).Dial(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashiService_GetHashigo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiServiceServer).GetHashigo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashiService_GetHashigo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiServiceServer).GetHashigo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashiService_PatchHashigo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashigoConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashiServiceServer).PatchHashigo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashiService_PatchHashigo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashiServiceServer).PatchHashigo(ctx, req.(*HashigoConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HashiService_ServiceDesc is the grpc.ServiceDesc for HashiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.HashiService",
	HandlerType: (*HashiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _HashiService_Status_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _HashiService_Ping_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _HashiService_Login_Handler,
		},
		{
			MethodName: "Compose",
			Handler:    _HashiService_Compose_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _HashiService_Logout_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _HashiService_Stop_Handler,
		},
		{
			MethodName: "Dial",
			Handler:    _HashiService_Dial_Handler,
		},
		{
			MethodName: "GetHashigo",
			Handler:    _HashiService_GetHashigo_Handler,
		},
		{
			MethodName: "PatchHashigo",
			Handler:    _HashiService_PatchHashigo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runetale/runetale/v1/hashi.proto",
}
