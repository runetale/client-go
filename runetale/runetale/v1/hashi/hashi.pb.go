// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.20.3
// source: runetale/runetale/v1/hashi.proto

package hashi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"` // net.UDPAddrを文字列で表現 (e.g., "192.168.1.1:51820")
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // "turn" or "stun" from ice_endpoint.go
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_hashi_proto_rawDescGZIP(), []int{0}
}

func (x *Endpoint) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Endpoint) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type HashiStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackendState        string                 `protobuf:"bytes,1,opt,name=backend_state,json=backendState,proto3" json:"backend_state,omitempty"`
	RunetaleIps         []string               `protobuf:"bytes,2,rep,name=runetale_ips,json=runetaleIps,proto3" json:"runetale_ips,omitempty"` // netip.Addr を文字列として扱う
	InteractiveLoginUrl string                 `protobuf:"bytes,3,opt,name=interactive_login_url,json=interactiveLoginUrl,proto3" json:"interactive_login_url,omitempty"`
	Self                *PeerStatus            `protobuf:"bytes,4,opt,name=self,proto3,oneof" json:"self,omitempty"`
	Peer                map[string]*PeerStatus `protobuf:"bytes,5,rep,name=peer,proto3" json:"peer,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map[key.NodePublic]*PeerStatus
}

func (x *HashiStatus) Reset() {
	*x = HashiStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashiStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashiStatus) ProtoMessage() {}

func (x *HashiStatus) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashiStatus.ProtoReflect.Descriptor instead.
func (*HashiStatus) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_hashi_proto_rawDescGZIP(), []int{1}
}

func (x *HashiStatus) GetBackendState() string {
	if x != nil {
		return x.BackendState
	}
	return ""
}

func (x *HashiStatus) GetRunetaleIps() []string {
	if x != nil {
		return x.RunetaleIps
	}
	return nil
}

func (x *HashiStatus) GetInteractiveLoginUrl() string {
	if x != nil {
		return x.InteractiveLoginUrl
	}
	return ""
}

func (x *HashiStatus) GetSelf() *PeerStatus {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *HashiStatus) GetPeer() map[string]*PeerStatus {
	if x != nil {
		return x.Peer
	}
	return nil
}

type PeerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PublicKey       string                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Os              string                 `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty"`
	HostName        string                 `protobuf:"bytes,4,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	RunetaleIps     []string               `protobuf:"bytes,5,rep,name=runetale_ips,json=RunetaleIPs,proto3" json:"runetale_ips,omitempty"` // netip.Addr を文字列として扱う
	PeerApiUrl      []string               `protobuf:"bytes,6,rep,name=peer_api_url,json=peerApiUrl,proto3" json:"peer_api_url,omitempty"`
	AllowedIps      []string               `protobuf:"bytes,7,rep,name=allowed_ips,json=allowedIps,proto3" json:"allowed_ips,omitempty"` // [netip.Prefix] を文字列のリストで表現
	RxBytes         int64                  `protobuf:"varint,8,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`
	TxBytes         int64                  `protobuf:"varint,9,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	LastHandshake   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_handshake,json=lastHandshake,proto3" json:"last_handshake,omitempty"`
	LastWrite       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_write,json=lastWrite,proto3" json:"last_write,omitempty"`
	Addrs           []string               `protobuf:"bytes,12,rep,name=addrs,proto3" json:"addrs,omitempty"`
	CurAddr         *string                `protobuf:"bytes,13,opt,name=cur_addr,json=curAddr,proto3,oneof" json:"cur_addr,omitempty"`
	IceAddr         *string                `protobuf:"bytes,14,opt,name=ice_addr,json=iceAddr,proto3,oneof" json:"ice_addr,omitempty"`
	AdvertiseRoutes []string               `protobuf:"bytes,15,rep,name=advertise_routes,json=advertiseRoutes,proto3" json:"advertise_routes,omitempty"`
	// subnet linkerを許可するかどうか
	IsSnatSubnet bool `protobuf:"varint,16,opt,name=is_snat_subnet,json=isSnatSubnet,proto3" json:"is_snat_subnet,omitempty"`
}

func (x *PeerStatus) Reset() {
	*x = PeerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerStatus) ProtoMessage() {}

func (x *PeerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerStatus.ProtoReflect.Descriptor instead.
func (*PeerStatus) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_hashi_proto_rawDescGZIP(), []int{2}
}

func (x *PeerStatus) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PeerStatus) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *PeerStatus) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *PeerStatus) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *PeerStatus) GetRunetaleIps() []string {
	if x != nil {
		return x.RunetaleIps
	}
	return nil
}

func (x *PeerStatus) GetPeerApiUrl() []string {
	if x != nil {
		return x.PeerApiUrl
	}
	return nil
}

func (x *PeerStatus) GetAllowedIps() []string {
	if x != nil {
		return x.AllowedIps
	}
	return nil
}

func (x *PeerStatus) GetRxBytes() int64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

func (x *PeerStatus) GetTxBytes() int64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *PeerStatus) GetLastHandshake() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHandshake
	}
	return nil
}

func (x *PeerStatus) GetLastWrite() *timestamppb.Timestamp {
	if x != nil {
		return x.LastWrite
	}
	return nil
}

func (x *PeerStatus) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *PeerStatus) GetCurAddr() string {
	if x != nil && x.CurAddr != nil {
		return *x.CurAddr
	}
	return ""
}

func (x *PeerStatus) GetIceAddr() string {
	if x != nil && x.IceAddr != nil {
		return *x.IceAddr
	}
	return ""
}

func (x *PeerStatus) GetAdvertiseRoutes() []string {
	if x != nil {
		return x.AdvertiseRoutes
	}
	return nil
}

func (x *PeerStatus) GetIsSnatSubnet() bool {
	if x != nil {
		return x.IsSnatSubnet
	}
	return false
}

type UserspacePeerEngineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GotAt      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=got_at,json=gotAt,proto3" json:"got_at,omitempty"`
	Peers      []*CompactPeerStatus   `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
	LocalAddrs []*Endpoint            `protobuf:"bytes,3,rep,name=local_addrs,json=localAddrs,proto3" json:"local_addrs,omitempty"` // []*runecfg.Endpoint
}

func (x *UserspacePeerEngineStatus) Reset() {
	*x = UserspacePeerEngineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserspacePeerEngineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserspacePeerEngineStatus) ProtoMessage() {}

func (x *UserspacePeerEngineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserspacePeerEngineStatus.ProtoReflect.Descriptor instead.
func (*UserspacePeerEngineStatus) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_hashi_proto_rawDescGZIP(), []int{3}
}

func (x *UserspacePeerEngineStatus) GetGotAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GotAt
	}
	return nil
}

func (x *UserspacePeerEngineStatus) GetPeers() []*CompactPeerStatus {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *UserspacePeerEngineStatus) GetLocalAddrs() []*Endpoint {
	if x != nil {
		return x.LocalAddrs
	}
	return nil
}

type CompactPeerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeKey       string                 `protobuf:"bytes,1,opt,name=node_key,json=nodeKey,proto3" json:"node_key,omitempty"`
	TxBytes       int64                  `protobuf:"varint,2,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	RxBytes       int64                  `protobuf:"varint,3,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`
	LastHandshake *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_handshake,json=lastHandshake,proto3" json:"last_handshake,omitempty"`
}

func (x *CompactPeerStatus) Reset() {
	*x = CompactPeerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactPeerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactPeerStatus) ProtoMessage() {}

func (x *CompactPeerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactPeerStatus.ProtoReflect.Descriptor instead.
func (*CompactPeerStatus) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_hashi_proto_rawDescGZIP(), []int{4}
}

func (x *CompactPeerStatus) GetNodeKey() string {
	if x != nil {
		return x.NodeKey
	}
	return ""
}

func (x *CompactPeerStatus) GetTxBytes() int64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *CompactPeerStatus) GetRxBytes() int64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

func (x *CompactPeerStatus) GetLastHandshake() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHandshake
	}
	return nil
}

type PingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip             string  `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	NodeIp         string  `protobuf:"bytes,2,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
	NodeName       string  `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Err            string  `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
	LatencySeconds float64 `protobuf:"fixed64,5,opt,name=latency_seconds,json=latencySeconds,proto3" json:"latency_seconds,omitempty"`
	Endpoint       string  `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	PeerApiPort    uint32  `protobuf:"varint,7,opt,name=peer_api_port,json=peerApiPort,proto3" json:"peer_api_port,omitempty"`
	PeerApiUrl     string  `protobuf:"bytes,8,opt,name=peer_api_url,json=peerApiUrl,proto3" json:"peer_api_url,omitempty"`
	IsLocalIp      bool    `protobuf:"varint,9,opt,name=is_local_ip,json=isLocalIp,proto3" json:"is_local_ip,omitempty"`
}

func (x *PingResult) Reset() {
	*x = PingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResult) ProtoMessage() {}

func (x *PingResult) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResult.ProtoReflect.Descriptor instead.
func (*PingResult) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_hashi_proto_rawDescGZIP(), []int{5}
}

func (x *PingResult) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PingResult) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *PingResult) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *PingResult) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *PingResult) GetLatencySeconds() float64 {
	if x != nil {
		return x.LatencySeconds
	}
	return 0
}

func (x *PingResult) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *PingResult) GetPeerApiPort() uint32 {
	if x != nil {
		return x.PeerApiPort
	}
	return 0
}

func (x *PingResult) GetPeerApiUrl() string {
	if x != nil {
		return x.PeerApiUrl
	}
	return ""
}

func (x *PingResult) GetIsLocalIp() bool {
	if x != nil {
		return x.IsLocalIp
	}
	return false
}

type ComposeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ComposeRequest) Reset() {
	*x = ComposeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeRequest) ProtoMessage() {}

func (x *ComposeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeRequest.ProtoReflect.Descriptor instead.
func (*ComposeRequest) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_hashi_proto_rawDescGZIP(), []int{6}
}

func (x *ComposeRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Size int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_hashi_proto_rawDescGZIP(), []int{7}
}

func (x *PingRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PingRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PingRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_hashi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_hashi_proto_rawDescGZIP(), []int{8}
}

func (x *StopRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_runetale_runetale_v1_hashi_proto protoreflect.FileDescriptor

var file_runetale_runetale_v1_hashi_proto_rawDesc = []byte{
	0x0a, 0x20, 0x72, 0x75, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x65, 0x2f, 0x72, 0x75, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x02, 0x0a,
	0x0b, 0x48, 0x61, 0x73, 0x68, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x65, 0x49, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65,
	0x6c, 0x66, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x4b, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x22, 0xc3,
	0x04, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e,
	0x65, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x52, 0x75, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x65, 0x49, 0x50, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x41, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x70, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x72, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x69,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x53, 0x6e, 0x61, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x75, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x6f, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x67, 0x6f, 0x74, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x41, 0x70, 0x69, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x70, 0x22, 0x22, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x45, 0x0a, 0x0b, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x22, 0x25, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x32, 0x90, 0x03, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68,
	0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x04, 0x44, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_runetale_runetale_v1_hashi_proto_rawDescOnce sync.Once
	file_runetale_runetale_v1_hashi_proto_rawDescData = file_runetale_runetale_v1_hashi_proto_rawDesc
)

func file_runetale_runetale_v1_hashi_proto_rawDescGZIP() []byte {
	file_runetale_runetale_v1_hashi_proto_rawDescOnce.Do(func() {
		file_runetale_runetale_v1_hashi_proto_rawDescData = protoimpl.X.CompressGZIP(file_runetale_runetale_v1_hashi_proto_rawDescData)
	})
	return file_runetale_runetale_v1_hashi_proto_rawDescData
}

var file_runetale_runetale_v1_hashi_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_runetale_runetale_v1_hashi_proto_goTypes = []interface{}{
	(*Endpoint)(nil),                  // 0: protos.Endpoint
	(*HashiStatus)(nil),               // 1: protos.HashiStatus
	(*PeerStatus)(nil),                // 2: protos.PeerStatus
	(*UserspacePeerEngineStatus)(nil), // 3: protos.UserspacePeerEngineStatus
	(*CompactPeerStatus)(nil),         // 4: protos.CompactPeerStatus
	(*PingResult)(nil),                // 5: protos.PingResult
	(*ComposeRequest)(nil),            // 6: protos.ComposeRequest
	(*PingRequest)(nil),               // 7: protos.PingRequest
	(*StopRequest)(nil),               // 8: protos.StopRequest
	nil,                               // 9: protos.HashiStatus.PeerEntry
	(*timestamppb.Timestamp)(nil),     // 10: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),             // 11: google.protobuf.Empty
}
var file_runetale_runetale_v1_hashi_proto_depIdxs = []int32{
	2,  // 0: protos.HashiStatus.self:type_name -> protos.PeerStatus
	9,  // 1: protos.HashiStatus.peer:type_name -> protos.HashiStatus.PeerEntry
	10, // 2: protos.PeerStatus.last_handshake:type_name -> google.protobuf.Timestamp
	10, // 3: protos.PeerStatus.last_write:type_name -> google.protobuf.Timestamp
	10, // 4: protos.UserspacePeerEngineStatus.got_at:type_name -> google.protobuf.Timestamp
	4,  // 5: protos.UserspacePeerEngineStatus.peers:type_name -> protos.CompactPeerStatus
	0,  // 6: protos.UserspacePeerEngineStatus.local_addrs:type_name -> protos.Endpoint
	10, // 7: protos.CompactPeerStatus.last_handshake:type_name -> google.protobuf.Timestamp
	2,  // 8: protos.HashiStatus.PeerEntry.value:type_name -> protos.PeerStatus
	11, // 9: protos.HashiService.Status:input_type -> google.protobuf.Empty
	7,  // 10: protos.HashiService.Ping:input_type -> protos.PingRequest
	11, // 11: protos.HashiService.Login:input_type -> google.protobuf.Empty
	6,  // 12: protos.HashiService.Compose:input_type -> protos.ComposeRequest
	11, // 13: protos.HashiService.Logout:input_type -> google.protobuf.Empty
	8,  // 14: protos.HashiService.Stop:input_type -> protos.StopRequest
	11, // 15: protos.HashiService.Dial:input_type -> google.protobuf.Empty
	1,  // 16: protos.HashiService.Status:output_type -> protos.HashiStatus
	5,  // 17: protos.HashiService.Ping:output_type -> protos.PingResult
	1,  // 18: protos.HashiService.Login:output_type -> protos.HashiStatus
	1,  // 19: protos.HashiService.Compose:output_type -> protos.HashiStatus
	1,  // 20: protos.HashiService.Logout:output_type -> protos.HashiStatus
	1,  // 21: protos.HashiService.Stop:output_type -> protos.HashiStatus
	1,  // 22: protos.HashiService.Dial:output_type -> protos.HashiStatus
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_runetale_runetale_v1_hashi_proto_init() }
func file_runetale_runetale_v1_hashi_proto_init() {
	if File_runetale_runetale_v1_hashi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_runetale_runetale_v1_hashi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_hashi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashiStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_hashi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_hashi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserspacePeerEngineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_hashi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactPeerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_hashi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_hashi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_hashi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_hashi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_runetale_runetale_v1_hashi_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_runetale_runetale_v1_hashi_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_runetale_runetale_v1_hashi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runetale_runetale_v1_hashi_proto_goTypes,
		DependencyIndexes: file_runetale_runetale_v1_hashi_proto_depIdxs,
		MessageInfos:      file_runetale_runetale_v1_hashi_proto_msgTypes,
	}.Build()
	File_runetale_runetale_v1_hashi_proto = out.File
	file_runetale_runetale_v1_hashi_proto_rawDesc = nil
	file_runetale_runetale_v1_hashi_proto_goTypes = nil
	file_runetale_runetale_v1_hashi_proto_depIdxs = nil
}
