// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.20.3
// source: runetale/runetale/v1/negotiation.proto

package negotiation

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NegotiationType int32

const (
	NegotiationType_OFFER     NegotiationType = 0
	NegotiationType_ANSWER    NegotiationType = 1
	NegotiationType_CANDIDATE NegotiationType = 2
	NegotiationType_SAYHELLO  NegotiationType = 3
)

// Enum value maps for NegotiationType.
var (
	NegotiationType_name = map[int32]string{
		0: "OFFER",
		1: "ANSWER",
		2: "CANDIDATE",
		3: "SAYHELLO",
	}
	NegotiationType_value = map[string]int32{
		"OFFER":     0,
		"ANSWER":    1,
		"CANDIDATE": 2,
		"SAYHELLO":  3,
	}
)

func (x NegotiationType) Enum() *NegotiationType {
	p := new(NegotiationType)
	*p = x
	return p
}

func (x NegotiationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NegotiationType) Descriptor() protoreflect.EnumDescriptor {
	return file_runetale_runetale_v1_negotiation_proto_enumTypes[0].Descriptor()
}

func (NegotiationType) Type() protoreflect.EnumType {
	return &file_runetale_runetale_v1_negotiation_proto_enumTypes[0]
}

func (x NegotiationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NegotiationType.Descriptor instead.
func (NegotiationType) EnumDescriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_negotiation_proto_rawDescGZIP(), []int{0}
}

type NegotiationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        NegotiationType `protobuf:"varint,1,opt,name=type,proto3,enum=protos.NegotiationType" json:"type,omitempty"`
	DstNodeKey  string          `protobuf:"bytes,2,opt,name=dstNodeKey,proto3" json:"dstNodeKey,omitempty"` // remote node key of the Peer you want to connect to
	DstWgPubKey string          `protobuf:"bytes,3,opt,name=dstWgPubKey,proto3" json:"dstWgPubKey,omitempty"`
	UFlag       string          `protobuf:"bytes,4,opt,name=uFlag,proto3" json:"uFlag,omitempty"`
	Pwd         string          `protobuf:"bytes,5,opt,name=pwd,proto3" json:"pwd,omitempty"`
	Candidate   string          `protobuf:"bytes,6,opt,name=candidate,proto3" json:"candidate,omitempty"`
	SessionID   []byte          `protobuf:"bytes,7,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Endpoints   []string        `protobuf:"bytes,8,rep,name=endpoints,proto3" json:"endpoints,omitempty"`      // "ip:port" 形式を最大8件
	EpochTs     *uint64         `protobuf:"varint,9,opt,name=epochTs,proto3,oneof" json:"epochTs,omitempty"`   // 鮮度/デバッグ用
	DedupeId    []byte          `protobuf:"bytes,10,opt,name=dedupeId,proto3,oneof" json:"dedupeId,omitempty"` // 重褊定
}

func (x *NegotiationMessage) Reset() {
	*x = NegotiationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_negotiation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NegotiationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NegotiationMessage) ProtoMessage() {}

func (x *NegotiationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_negotiation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NegotiationMessage.ProtoReflect.Descriptor instead.
func (*NegotiationMessage) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_negotiation_proto_rawDescGZIP(), []int{0}
}

func (x *NegotiationMessage) GetType() NegotiationType {
	if x != nil {
		return x.Type
	}
	return NegotiationType_OFFER
}

func (x *NegotiationMessage) GetDstNodeKey() string {
	if x != nil {
		return x.DstNodeKey
	}
	return ""
}

func (x *NegotiationMessage) GetDstWgPubKey() string {
	if x != nil {
		return x.DstWgPubKey
	}
	return ""
}

func (x *NegotiationMessage) GetUFlag() string {
	if x != nil {
		return x.UFlag
	}
	return ""
}

func (x *NegotiationMessage) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *NegotiationMessage) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *NegotiationMessage) GetSessionID() []byte {
	if x != nil {
		return x.SessionID
	}
	return nil
}

func (x *NegotiationMessage) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *NegotiationMessage) GetEpochTs() uint64 {
	if x != nil && x.EpochTs != nil {
		return *x.EpochTs
	}
	return 0
}

func (x *NegotiationMessage) GetDedupeId() []byte {
	if x != nil {
		return x.DedupeId
	}
	return nil
}

type HandshakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstNodeKey string `protobuf:"bytes,1,opt,name=dstNodeKey,proto3" json:"dstNodeKey,omitempty"` // remote node key of the Peer you want to connect to
	SrcNodeKey string `protobuf:"bytes,2,opt,name=srcNodeKey,proto3" json:"srcNodeKey,omitempty"` // node key of the originating peer to be sent to the remote peer
	WgPubKey   string `protobuf:"bytes,3,opt,name=wgPubKey,proto3" json:"wgPubKey,omitempty"`     // wgPubKey from request node
	UFlag      string `protobuf:"bytes,4,opt,name=uFlag,proto3" json:"uFlag,omitempty"`
	Pwd        string `protobuf:"bytes,5,opt,name=pwd,proto3" json:"pwd,omitempty"`
	SessionID  []byte `protobuf:"bytes,6,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (x *HandshakeRequest) Reset() {
	*x = HandshakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_negotiation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandshakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeRequest) ProtoMessage() {}

func (x *HandshakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_negotiation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeRequest.ProtoReflect.Descriptor instead.
func (*HandshakeRequest) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_negotiation_proto_rawDescGZIP(), []int{1}
}

func (x *HandshakeRequest) GetDstNodeKey() string {
	if x != nil {
		return x.DstNodeKey
	}
	return ""
}

func (x *HandshakeRequest) GetSrcNodeKey() string {
	if x != nil {
		return x.SrcNodeKey
	}
	return ""
}

func (x *HandshakeRequest) GetWgPubKey() string {
	if x != nil {
		return x.WgPubKey
	}
	return ""
}

func (x *HandshakeRequest) GetUFlag() string {
	if x != nil {
		return x.UFlag
	}
	return ""
}

func (x *HandshakeRequest) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *HandshakeRequest) GetSessionID() []byte {
	if x != nil {
		return x.SessionID
	}
	return nil
}

type CandidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstNodeKey string `protobuf:"bytes,1,opt,name=dstNodeKey,proto3" json:"dstNodeKey,omitempty"` // remote node key of the Peer you want to connect to
	SrcNodeKey string `protobuf:"bytes,2,opt,name=srcNodeKey,proto3" json:"srcNodeKey,omitempty"` // node key of the originating peer to be sent to the remote peer
	WgPubKey   string `protobuf:"bytes,3,opt,name=wgPubKey,proto3" json:"wgPubKey,omitempty"`     // wgPubKey from request node
	Candidate  string `protobuf:"bytes,4,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (x *CandidateRequest) Reset() {
	*x = CandidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_negotiation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateRequest) ProtoMessage() {}

func (x *CandidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_negotiation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateRequest.ProtoReflect.Descriptor instead.
func (*CandidateRequest) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_negotiation_proto_rawDescGZIP(), []int{2}
}

func (x *CandidateRequest) GetDstNodeKey() string {
	if x != nil {
		return x.DstNodeKey
	}
	return ""
}

func (x *CandidateRequest) GetSrcNodeKey() string {
	if x != nil {
		return x.SrcNodeKey
	}
	return ""
}

func (x *CandidateRequest) GetWgPubKey() string {
	if x != nil {
		return x.WgPubKey
	}
	return ""
}

func (x *CandidateRequest) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

var File_runetale_runetale_v1_negotiation_proto protoreflect.FileDescriptor

var file_runetale_runetale_v1_negotiation_proto_rawDesc = []byte{
	0x0a, 0x26, 0x72, 0x75, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x65, 0x2f, 0x72, 0x75, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x02,
	0x0a, 0x12, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x57, 0x67, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x57, 0x67, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x54,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x54,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65, 0x49, 0x64, 0x22, 0xb4,
	0x01, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x67, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x67, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x75, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x67,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x67,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2a, 0x45, 0x0a, 0x0f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x46, 0x46, 0x45, 0x52,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x41, 0x59, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x10, 0x03, 0x32, 0x99, 0x02, 0x0a, 0x12,
	0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x09, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x6e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_runetale_runetale_v1_negotiation_proto_rawDescOnce sync.Once
	file_runetale_runetale_v1_negotiation_proto_rawDescData = file_runetale_runetale_v1_negotiation_proto_rawDesc
)

func file_runetale_runetale_v1_negotiation_proto_rawDescGZIP() []byte {
	file_runetale_runetale_v1_negotiation_proto_rawDescOnce.Do(func() {
		file_runetale_runetale_v1_negotiation_proto_rawDescData = protoimpl.X.CompressGZIP(file_runetale_runetale_v1_negotiation_proto_rawDescData)
	})
	return file_runetale_runetale_v1_negotiation_proto_rawDescData
}

var file_runetale_runetale_v1_negotiation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_runetale_runetale_v1_negotiation_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_runetale_runetale_v1_negotiation_proto_goTypes = []interface{}{
	(NegotiationType)(0),       // 0: protos.NegotiationType
	(*NegotiationMessage)(nil), // 1: protos.NegotiationMessage
	(*HandshakeRequest)(nil),   // 2: protos.HandshakeRequest
	(*CandidateRequest)(nil),   // 3: protos.CandidateRequest
	(*emptypb.Empty)(nil),      // 4: google.protobuf.Empty
}
var file_runetale_runetale_v1_negotiation_proto_depIdxs = []int32{
	0, // 0: protos.NegotiationMessage.type:type_name -> protos.NegotiationType
	2, // 1: protos.NegotiationService.Offer:input_type -> protos.HandshakeRequest
	2, // 2: protos.NegotiationService.Answer:input_type -> protos.HandshakeRequest
	3, // 3: protos.NegotiationService.Candidate:input_type -> protos.CandidateRequest
	1, // 4: protos.NegotiationService.Connect:input_type -> protos.NegotiationMessage
	4, // 5: protos.NegotiationService.Offer:output_type -> google.protobuf.Empty
	4, // 6: protos.NegotiationService.Answer:output_type -> google.protobuf.Empty
	4, // 7: protos.NegotiationService.Candidate:output_type -> google.protobuf.Empty
	1, // 8: protos.NegotiationService.Connect:output_type -> protos.NegotiationMessage
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_runetale_runetale_v1_negotiation_proto_init() }
func file_runetale_runetale_v1_negotiation_proto_init() {
	if File_runetale_runetale_v1_negotiation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_runetale_runetale_v1_negotiation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NegotiationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_negotiation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandshakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_negotiation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_runetale_runetale_v1_negotiation_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_runetale_runetale_v1_negotiation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runetale_runetale_v1_negotiation_proto_goTypes,
		DependencyIndexes: file_runetale_runetale_v1_negotiation_proto_depIdxs,
		EnumInfos:         file_runetale_runetale_v1_negotiation_proto_enumTypes,
		MessageInfos:      file_runetale_runetale_v1_negotiation_proto_msgTypes,
	}.Build()
	File_runetale_runetale_v1_negotiation_proto = out.File
	file_runetale_runetale_v1_negotiation_proto_rawDesc = nil
	file_runetale_runetale_v1_negotiation_proto_goTypes = nil
	file_runetale_runetale_v1_negotiation_proto_depIdxs = nil
}
