// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: runetale/runetale/v1/access_group.proto

package access_group

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccessGroupService_Update_FullMethodName = "/protos.AccessGroupService/Update"
)

// AccessGroupServiceClient is the client API for AccessGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessGroupServiceClient interface {
	Update(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error)
}

type accessGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessGroupServiceClient(cc grpc.ClientConnInterface) AccessGroupServiceClient {
	return &accessGroupServiceClient{cc}
}

func (c *accessGroupServiceClient) Update(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error) {
	out := new(AddGroupResponse)
	err := c.cc.Invoke(ctx, AccessGroupService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessGroupServiceServer is the server API for AccessGroupService service.
// All implementations should embed UnimplementedAccessGroupServiceServer
// for forward compatibility
type AccessGroupServiceServer interface {
	Update(context.Context, *AddGroupRequest) (*AddGroupResponse, error)
}

// UnimplementedAccessGroupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccessGroupServiceServer struct {
}

func (UnimplementedAccessGroupServiceServer) Update(context.Context, *AddGroupRequest) (*AddGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

// UnsafeAccessGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessGroupServiceServer will
// result in compilation errors.
type UnsafeAccessGroupServiceServer interface {
	mustEmbedUnimplementedAccessGroupServiceServer()
}

func RegisterAccessGroupServiceServer(s grpc.ServiceRegistrar, srv AccessGroupServiceServer) {
	s.RegisterService(&AccessGroupService_ServiceDesc, srv)
}

func _AccessGroupService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessGroupServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessGroupService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessGroupServiceServer).Update(ctx, req.(*AddGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessGroupService_ServiceDesc is the grpc.ServiceDesc for AccessGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.AccessGroupService",
	HandlerType: (*AccessGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _AccessGroupService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runetale/runetale/v1/access_group.proto",
}
