// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.20.3
// source: runetale/runetale/v1/node.proto

package node

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PacketFlowLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId uint64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// 特定のノードからネットワークログメッセージを記録した時刻のタイムスタンプ
	LoggedAt string `protobuf:"bytes,2,opt,name=loggedAt,proto3" json:"loggedAt,omitempty"` // for example: "2023-10-01T12:00:00Z"
	// 特定のノードからネットワークログメッセージを記録開始した時刻のタイムスタンプ
	StartedAt string `protobuf:"bytes,3,opt,name=startedAt,proto3" json:"startedAt,omitempty"` // for example: "2023-10-01T12:00:00Z"
	// 特定のノードからネットワークログメッセージを記録終了した時刻のタイムスタンプ
	EndedAt string `protobuf:"bytes,4,opt,name=endedAt,proto3" json:"endedAt,omitempty"` // for example: "2023-10-01T12:00:00Z"
	// 100.x.y.z同士のトラフィックを記録する
	PeerTraffic []*PacketFlowLog `protobuf:"bytes,5,rep,name=peerTraffic,proto3" json:"peerTraffic,omitempty"`
	// 明示的にアドバタイズされたサブネットルート上での、ノードと外部とのトラフィックを記録
	LanTraffic []*PacketFlowLog `protobuf:"bytes,6,rep,name=lanTraffic,proto3" json:"lanTraffic,omitempty"`
	// Srcは RunetaleIP アドレスですが、プロトコル、ソースポート、デスティネーションは空になる
	ExitNodeTraffic []*PacketFlowLog `protobuf:"bytes,7,rep,name=exitNodeTraffic,proto3" json:"exitNodeTraffic,omitempty"`
	// 仮想ネットワークの下層で動作する物理ネットワーク層におけるトラフィックを記する
	TransportTraffic []*PacketFlowLog `protobuf:"bytes,8,rep,name=transportTraffic,proto3" json:"transportTraffic,omitempty"`
}

func (x *PacketFlowLogRequest) Reset() {
	*x = PacketFlowLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketFlowLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketFlowLogRequest) ProtoMessage() {}

func (x *PacketFlowLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketFlowLogRequest.ProtoReflect.Descriptor instead.
func (*PacketFlowLogRequest) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_node_proto_rawDescGZIP(), []int{0}
}

func (x *PacketFlowLogRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *PacketFlowLogRequest) GetLoggedAt() string {
	if x != nil {
		return x.LoggedAt
	}
	return ""
}

func (x *PacketFlowLogRequest) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *PacketFlowLogRequest) GetEndedAt() string {
	if x != nil {
		return x.EndedAt
	}
	return ""
}

func (x *PacketFlowLogRequest) GetPeerTraffic() []*PacketFlowLog {
	if x != nil {
		return x.PeerTraffic
	}
	return nil
}

func (x *PacketFlowLogRequest) GetLanTraffic() []*PacketFlowLog {
	if x != nil {
		return x.LanTraffic
	}
	return nil
}

func (x *PacketFlowLogRequest) GetExitNodeTraffic() []*PacketFlowLog {
	if x != nil {
		return x.ExitNodeTraffic
	}
	return nil
}

func (x *PacketFlowLogRequest) GetTransportTraffic() []*PacketFlowLog {
	if x != nil {
		return x.TransportTraffic
	}
	return nil
}

type PacketFlowLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proto     uint32 `protobuf:"varint,1,opt,name=Proto,proto3" json:"Proto,omitempty"`
	Src       string `protobuf:"bytes,2,opt,name=Src,proto3" json:"Src,omitempty"`
	Dst       string `protobuf:"bytes,3,opt,name=Dst,proto3" json:"Dst,omitempty"`
	TxPackets uint64 `protobuf:"varint,4,opt,name=TxPackets,proto3" json:"TxPackets,omitempty"`
	TxBytes   uint64 `protobuf:"varint,5,opt,name=TxBytes,proto3" json:"TxBytes,omitempty"`
	RxPackets uint64 `protobuf:"varint,6,opt,name=RxPackets,proto3" json:"RxPackets,omitempty"`
	RxBytes   uint64 `protobuf:"varint,7,opt,name=RxBytes,proto3" json:"RxBytes,omitempty"`
}

func (x *PacketFlowLog) Reset() {
	*x = PacketFlowLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketFlowLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketFlowLog) ProtoMessage() {}

func (x *PacketFlowLog) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketFlowLog.ProtoReflect.Descriptor instead.
func (*PacketFlowLog) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_node_proto_rawDescGZIP(), []int{1}
}

func (x *PacketFlowLog) GetProto() uint32 {
	if x != nil {
		return x.Proto
	}
	return 0
}

func (x *PacketFlowLog) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *PacketFlowLog) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *PacketFlowLog) GetTxPackets() uint64 {
	if x != nil {
		return x.TxPackets
	}
	return 0
}

func (x *PacketFlowLog) GetTxBytes() uint64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *PacketFlowLog) GetRxPackets() uint64 {
	if x != nil {
		return x.RxPackets
	}
	return 0
}

func (x *PacketFlowLog) GetRxBytes() uint64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

type SyncNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEmpty     bool    `protobuf:"varint,1,opt,name=isEmpty,proto3" json:"isEmpty,omitempty"`
	RemoteNodes []*Node `protobuf:"bytes,2,rep,name=remoteNodes,proto3" json:"remoteNodes,omitempty"`
	Ip          string  `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`     // host ip
	Cidr        string  `protobuf:"bytes,4,opt,name=cidr,proto3" json:"cidr,omitempty"` // host cidr
}

func (x *SyncNodesResponse) Reset() {
	*x = SyncNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncNodesResponse) ProtoMessage() {}

func (x *SyncNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncNodesResponse.ProtoReflect.Descriptor instead.
func (*SyncNodesResponse) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_node_proto_rawDescGZIP(), []int{2}
}

func (x *SyncNodesResponse) GetIsEmpty() bool {
	if x != nil {
		return x.IsEmpty
	}
	return false
}

func (x *SyncNodesResponse) GetRemoteNodes() []*Node {
	if x != nil {
		return x.RemoteNodes
	}
	return nil
}

func (x *SyncNodesResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SyncNodesResponse) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NodeId     uint64   `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	NodeKey    string   `protobuf:"bytes,3,opt,name=nodeKey,proto3" json:"nodeKey,omitempty"`
	WgPubKey   string   `protobuf:"bytes,4,opt,name=wgPubKey,proto3" json:"wgPubKey,omitempty"`
	AllowedIPs []string `protobuf:"bytes,5,rep,name=allowedIPs,proto3" json:"allowedIPs,omitempty"`
	Ip         string   `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Cidr       string   `protobuf:"bytes,7,opt,name=cidr,proto3" json:"cidr,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_node_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Node) GetNodeKey() string {
	if x != nil {
		return x.NodeKey
	}
	return ""
}

func (x *Node) GetWgPubKey() string {
	if x != nil {
		return x.WgPubKey
	}
	return ""
}

func (x *Node) GetAllowedIPs() []string {
	if x != nil {
		return x.AllowedIPs
	}
	return nil
}

func (x *Node) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Node) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

type ComposeNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Cidr string `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`
}

func (x *ComposeNodeResponse) Reset() {
	*x = ComposeNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeNodeResponse) ProtoMessage() {}

func (x *ComposeNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeNodeResponse.ProtoReflect.Descriptor instead.
func (*ComposeNodeResponse) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_node_proto_rawDescGZIP(), []int{4}
}

func (x *ComposeNodeResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ComposeNodeResponse) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

type NetPortRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 以下のような形式
	// - IPv4 or IPv6の単一のIPアドレス
	// - "*" は全て許可
	// - "192.168.0.0/16" cidrが含まれたipの範囲
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// portのフォーマットは
	// - 全て指定の `*` か
	// - 単一指定の `22` か
	// - 複数指定の `80, 443` か `2つまで`
	// - 範囲指定の `100-200“
	// - 単一のportの場合はlastにも同じポート番号が入る
	Ports *NetPortRangePortRange `protobuf:"bytes,2,opt,name=ports,proto3" json:"ports,omitempty"`
	// advertiseすることが許可されたIP範囲
	// 1.2.3.4/16のIP+Maskの形
	// "10.0.0.0/8,192.172.0.0/24"のようにcommaで区切る
	AdvertisedRoutes string `protobuf:"bytes,3,opt,name=advertisedRoutes,proto3" json:"advertisedRoutes,omitempty"`
}

func (x *NetPortRange) Reset() {
	*x = NetPortRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetPortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetPortRange) ProtoMessage() {}

func (x *NetPortRange) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetPortRange.ProtoReflect.Descriptor instead.
func (*NetPortRange) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_node_proto_rawDescGZIP(), []int{5}
}

func (x *NetPortRange) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetPortRange) GetPorts() *NetPortRangePortRange {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *NetPortRange) GetAdvertisedRoutes() string {
	if x != nil {
		return x.AdvertisedRoutes
	}
	return ""
}

type FilterRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source ips,
	// - "192.168.0.0/16" cidrが含まれたipの範囲
	SrcIps []string `protobuf:"bytes,1,rep,name=srcIps,proto3" json:"srcIps,omitempty"`
	// dstのpeerのリスト
	Dsts []*NetPortRange `protobuf:"bytes,2,rep,name=dsts,proto3" json:"dsts,omitempty"`
	// https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
	// protocol numbers
	// Unknown = 0x00
	// ICMPv4  = 0x01
	// ICMPv6  = 0x3a
	// TCP     = 0x06
	// UDP     = 0x11
	IPProto []uint32 `protobuf:"varint,3,rep,packed,name=iPProto,proto3" json:"iPProto,omitempty"`
}

func (x *FilterRule) Reset() {
	*x = FilterRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRule) ProtoMessage() {}

func (x *FilterRule) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRule.ProtoReflect.Descriptor instead.
func (*FilterRule) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_node_proto_rawDescGZIP(), []int{6}
}

func (x *FilterRule) GetSrcIps() []string {
	if x != nil {
		return x.SrcIps
	}
	return nil
}

func (x *FilterRule) GetDsts() []*NetPortRange {
	if x != nil {
		return x.Dsts
	}
	return nil
}

func (x *FilterRule) GetIPProto() []uint32 {
	if x != nil {
		return x.IPProto
	}
	return nil
}

type NetworkMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// このmapのsequential id
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// このNodeの情報
	Node *Node `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	// このNodeがアクセスするpeers, つまりremote nodesの情報が含まれている
	Peers []*Node `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
	// 変更があった場合のPeers
	// serverで差分更新される
	PeersChanged []*Node `protobuf:"bytes,4,rep,name=peersChanged,proto3" json:"peersChanged,omitempty"`
	// 消された場合のPeersのNodeID
	PeersRemoved []uint64 `protobuf:"varint,5,rep,packed,name=peersRemoved,proto3" json:"peersRemoved,omitempty"`
	// Firewall Rules
	PacketFilter []*FilterRule `protobuf:"bytes,6,rep,name=packetFilter,proto3" json:"packetFilter,omitempty"`
	// このnodeがadvertiseするIPアドレス
	// 1.2.3.4/16のIP+Maskの形
	// "10.0.0.0/8,192.172.0.0/24"のようにcommaで区切る
	AdvertisedRoute string `protobuf:"bytes,7,opt,name=advertisedRoute,proto3" json:"advertisedRoute,omitempty"`
	// jailedがtrueの場合全てのパケットを拒否する
	Jailed   bool       `protobuf:"varint,8,opt,name=jailed,proto3" json:"jailed,omitempty"`
	IceTable []*Node    `protobuf:"bytes,9,rep,name=iceTable,proto3" json:"iceTable,omitempty"`
	Dns      *DNSConfig `protobuf:"bytes,10,opt,name=dns,proto3" json:"dns,omitempty"`
}

func (x *NetworkMapResponse) Reset() {
	*x = NetworkMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMapResponse) ProtoMessage() {}

func (x *NetworkMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMapResponse.ProtoReflect.Descriptor instead.
func (*NetworkMapResponse) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_node_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkMapResponse) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *NetworkMapResponse) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NetworkMapResponse) GetPeers() []*Node {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *NetworkMapResponse) GetPeersChanged() []*Node {
	if x != nil {
		return x.PeersChanged
	}
	return nil
}

func (x *NetworkMapResponse) GetPeersRemoved() []uint64 {
	if x != nil {
		return x.PeersRemoved
	}
	return nil
}

func (x *NetworkMapResponse) GetPacketFilter() []*FilterRule {
	if x != nil {
		return x.PacketFilter
	}
	return nil
}

func (x *NetworkMapResponse) GetAdvertisedRoute() string {
	if x != nil {
		return x.AdvertisedRoute
	}
	return ""
}

func (x *NetworkMapResponse) GetJailed() bool {
	if x != nil {
		return x.Jailed
	}
	return false
}

func (x *NetworkMapResponse) GetIceTable() []*Node {
	if x != nil {
		return x.IceTable
	}
	return nil
}

func (x *NetworkMapResponse) GetDns() *DNSConfig {
	if x != nil {
		return x.Dns
	}
	return nil
}

type Resolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *Resolver) Reset() {
	*x = Resolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resolver) ProtoMessage() {}

func (x *Resolver) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resolver.ProtoReflect.Descriptor instead.
func (*Resolver) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_node_proto_rawDescGZIP(), []int{8}
}

func (x *Resolver) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type Resolvers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resolvers []*Resolver `protobuf:"bytes,1,rep,name=resolvers,proto3" json:"resolvers,omitempty"`
}

func (x *Resolvers) Reset() {
	*x = Resolvers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resolvers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resolvers) ProtoMessage() {}

func (x *Resolvers) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resolvers.ProtoReflect.Descriptor instead.
func (*Resolvers) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_node_proto_rawDescGZIP(), []int{9}
}

func (x *Resolvers) GetResolvers() []*Resolver {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

type DNSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resolversは使用するDNSリゾルバの一覧、優先順位順。
	// デフォルトでは設定されていない。
	// 有効にすると接続されたクライアントはローカルのDNS設定を無視し、
	// 常にこれらのグローバルネームサーバーを使用する。
	// 設定される場合は以下のような値が入る
	// - 8.8.8.8
	// - 9.9.9.9
	// - 2001:4860:4860::8888
	// - 2001:4860:4860::9999
	Resolvers []*Resolver `protobuf:"bytes,1,rep,name=resolvers,proto3" json:"resolvers,omitempty"`
	// RoutesはDNS名のサフィックス（接尾辞）を、DNSリゾルバのセットにマッピングします。
	// 値が空のスライスである場合、そのサフィックスはWonderDNSの100.200.100.200で処理される。
	// マップのキーはFQDNのsuffix
	// 例えば"printer.office.example.com."の場合は
	// "office.example.com."になる。
	// e.g. office.example.com.:["178.10.3.1"]
	// - 2025/3/27時点では主にSplit DNSで使用する。
	Routes map[string]*Resolvers `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// SearchDomainsはたとえばあるRunetに"example.com"と"test.com"が検索ドメインとして設定されている場合、
	// ユーザーがserverという名前を入力すると、Runetaleは
	//  1. server.example.comを設定されたネームサーバー（例：8.8.8.8 や 1.1.1.1）で検索します。
	//  2. 一致しなければ、次にserver.test.comを同様のネームサーバーで検索します。
	//
	// e.g. ["example.com","test.com"] のような感じ
	SearchDomains []string `protobuf:"bytes,3,rep,name=searchDomains,proto3" json:"searchDomains,omitempty"`
	// 出口ノードとして DNS プロキシを行う際に
	// 応答を無視するDNSサフィックスのリスト
	// defaultでは[.rt.net]
	ExitNodeFilterd []string `protobuf:"bytes,4,rep,name=exitNodeFilterd,proto3" json:"exitNodeFilterd,omitempty"`
	// wonderdnsを有効にするかどうか
	EnabledWonderDNS bool `protobuf:"varint,5,opt,name=enabledWonderDNS,proto3" json:"enabledWonderDNS,omitempty"`
}

func (x *DNSConfig) Reset() {
	*x = DNSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSConfig) ProtoMessage() {}

func (x *DNSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSConfig.ProtoReflect.Descriptor instead.
func (*DNSConfig) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_node_proto_rawDescGZIP(), []int{10}
}

func (x *DNSConfig) GetResolvers() []*Resolver {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

func (x *DNSConfig) GetRoutes() map[string]*Resolvers {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *DNSConfig) GetSearchDomains() []string {
	if x != nil {
		return x.SearchDomains
	}
	return nil
}

func (x *DNSConfig) GetExitNodeFilterd() []string {
	if x != nil {
		return x.ExitNodeFilterd
	}
	return nil
}

func (x *DNSConfig) GetEnabledWonderDNS() bool {
	if x != nil {
		return x.EnabledWonderDNS
	}
	return false
}

type NetPortRangePortRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First uint64 `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Last  uint64 `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *NetPortRangePortRange) Reset() {
	*x = NetPortRangePortRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runetale_runetale_v1_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetPortRangePortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetPortRangePortRange) ProtoMessage() {}

func (x *NetPortRangePortRange) ProtoReflect() protoreflect.Message {
	mi := &file_runetale_runetale_v1_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetPortRangePortRange.ProtoReflect.Descriptor instead.
func (*NetPortRangePortRange) Descriptor() ([]byte, []int) {
	return file_runetale_runetale_v1_node_proto_rawDescGZIP(), []int{5, 0}
}

func (x *NetPortRangePortRange) GetFirst() uint64 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *NetPortRangePortRange) GetLast() uint64 {
	if x != nil {
		return x.Last
	}
	return 0
}

var File_runetale_runetale_v1_node_proto protoreflect.FileDescriptor

var file_runetale_runetale_v1_node_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x72, 0x75, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x65, 0x2f, 0x72, 0x75, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x70,
	0x65, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x12, 0x35, 0x0a, 0x0a, 0x6c, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x52,
	0x0a, 0x6c, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x0f, 0x65,
	0x78, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x52, 0x0f, 0x65, 0x78, 0x69,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x41, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x22,
	0xb9, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x72, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x54, 0x78, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x11,
	0x53, 0x79, 0x6e, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x22,
	0xac, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x67, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x67, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x50, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x50, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x22, 0x39,
	0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x4e, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x35, 0x0a, 0x09,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6c,
	0x61, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x49, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x49, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4e, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x64,
	0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x03,
	0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x0c,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6a, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x08,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x4e, 0x53,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x22, 0x1e, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x3b, 0x0a, 0x09, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x09, 0x44, 0x4e, 0x53,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78,
	0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x4e,
	0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x57, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x1a, 0x4c, 0x0a, 0x0b, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xc1, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x13,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x2e,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_runetale_runetale_v1_node_proto_rawDescOnce sync.Once
	file_runetale_runetale_v1_node_proto_rawDescData = file_runetale_runetale_v1_node_proto_rawDesc
)

func file_runetale_runetale_v1_node_proto_rawDescGZIP() []byte {
	file_runetale_runetale_v1_node_proto_rawDescOnce.Do(func() {
		file_runetale_runetale_v1_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_runetale_runetale_v1_node_proto_rawDescData)
	})
	return file_runetale_runetale_v1_node_proto_rawDescData
}

var file_runetale_runetale_v1_node_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_runetale_runetale_v1_node_proto_goTypes = []interface{}{
	(*PacketFlowLogRequest)(nil),  // 0: protos.PacketFlowLogRequest
	(*PacketFlowLog)(nil),         // 1: protos.PacketFlowLog
	(*SyncNodesResponse)(nil),     // 2: protos.SyncNodesResponse
	(*Node)(nil),                  // 3: protos.Node
	(*ComposeNodeResponse)(nil),   // 4: protos.ComposeNodeResponse
	(*NetPortRange)(nil),          // 5: protos.NetPortRange
	(*FilterRule)(nil),            // 6: protos.FilterRule
	(*NetworkMapResponse)(nil),    // 7: protos.NetworkMapResponse
	(*Resolver)(nil),              // 8: protos.Resolver
	(*Resolvers)(nil),             // 9: protos.Resolvers
	(*DNSConfig)(nil),             // 10: protos.DNSConfig
	(*NetPortRangePortRange)(nil), // 11: protos.NetPortRange.portRange
	nil,                           // 12: protos.DNSConfig.RoutesEntry
	(*emptypb.Empty)(nil),         // 13: google.protobuf.Empty
}
var file_runetale_runetale_v1_node_proto_depIdxs = []int32{
	1,  // 0: protos.PacketFlowLogRequest.peerTraffic:type_name -> protos.PacketFlowLog
	1,  // 1: protos.PacketFlowLogRequest.lanTraffic:type_name -> protos.PacketFlowLog
	1,  // 2: protos.PacketFlowLogRequest.exitNodeTraffic:type_name -> protos.PacketFlowLog
	1,  // 3: protos.PacketFlowLogRequest.transportTraffic:type_name -> protos.PacketFlowLog
	3,  // 4: protos.SyncNodesResponse.remoteNodes:type_name -> protos.Node
	11, // 5: protos.NetPortRange.ports:type_name -> protos.NetPortRange.portRange
	5,  // 6: protos.FilterRule.dsts:type_name -> protos.NetPortRange
	3,  // 7: protos.NetworkMapResponse.node:type_name -> protos.Node
	3,  // 8: protos.NetworkMapResponse.peers:type_name -> protos.Node
	3,  // 9: protos.NetworkMapResponse.peersChanged:type_name -> protos.Node
	6,  // 10: protos.NetworkMapResponse.packetFilter:type_name -> protos.FilterRule
	3,  // 11: protos.NetworkMapResponse.iceTable:type_name -> protos.Node
	10, // 12: protos.NetworkMapResponse.dns:type_name -> protos.DNSConfig
	8,  // 13: protos.Resolvers.resolvers:type_name -> protos.Resolver
	8,  // 14: protos.DNSConfig.resolvers:type_name -> protos.Resolver
	12, // 15: protos.DNSConfig.routes:type_name -> protos.DNSConfig.RoutesEntry
	9,  // 16: protos.DNSConfig.RoutesEntry.value:type_name -> protos.Resolvers
	13, // 17: protos.NodeService.ComposeNode:input_type -> google.protobuf.Empty
	13, // 18: protos.NodeService.GetNetworkMap:input_type -> google.protobuf.Empty
	7,  // 19: protos.NodeService.ConnectNetworkMapTable:input_type -> protos.NetworkMapResponse
	0,  // 20: protos.NodeService.UploadPacketFlowLog:input_type -> protos.PacketFlowLogRequest
	4,  // 21: protos.NodeService.ComposeNode:output_type -> protos.ComposeNodeResponse
	7,  // 22: protos.NodeService.GetNetworkMap:output_type -> protos.NetworkMapResponse
	7,  // 23: protos.NodeService.ConnectNetworkMapTable:output_type -> protos.NetworkMapResponse
	13, // 24: protos.NodeService.UploadPacketFlowLog:output_type -> google.protobuf.Empty
	21, // [21:25] is the sub-list for method output_type
	17, // [17:21] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_runetale_runetale_v1_node_proto_init() }
func file_runetale_runetale_v1_node_proto_init() {
	if File_runetale_runetale_v1_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_runetale_runetale_v1_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketFlowLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketFlowLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetPortRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resolvers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runetale_runetale_v1_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetPortRangePortRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_runetale_runetale_v1_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runetale_runetale_v1_node_proto_goTypes,
		DependencyIndexes: file_runetale_runetale_v1_node_proto_depIdxs,
		MessageInfos:      file_runetale_runetale_v1_node_proto_msgTypes,
	}.Build()
	File_runetale_runetale_v1_node_proto = out.File
	file_runetale_runetale_v1_node_proto_rawDesc = nil
	file_runetale_runetale_v1_node_proto_goTypes = nil
	file_runetale_runetale_v1_node_proto_depIdxs = nil
}
