// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: runetale/runetale/v1/node.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeService_ComposeNode_FullMethodName            = "/protos.NodeService/ComposeNode"
	NodeService_GetNetworkMap_FullMethodName          = "/protos.NodeService/GetNetworkMap"
	NodeService_ConnectNetworkMapTable_FullMethodName = "/protos.NodeService/ConnectNetworkMapTable"
)

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	ComposeNode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ComposeNodeResponse, error)
	GetNetworkMap(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NetworkMapResponse, error)
	ConnectNetworkMapTable(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NetworkMapResponse, NetworkMapResponse], error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) ComposeNode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ComposeNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComposeNodeResponse)
	err := c.cc.Invoke(ctx, NodeService_ComposeNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) GetNetworkMap(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NetworkMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkMapResponse)
	err := c.cc.Invoke(ctx, NodeService_GetNetworkMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) ConnectNetworkMapTable(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NetworkMapResponse, NetworkMapResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[0], NodeService_ConnectNetworkMapTable_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NetworkMapResponse, NetworkMapResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeService_ConnectNetworkMapTableClient = grpc.BidiStreamingClient[NetworkMapResponse, NetworkMapResponse]

// NodeServiceServer is the server API for NodeService service.
// All implementations should embed UnimplementedNodeServiceServer
// for forward compatibility.
type NodeServiceServer interface {
	ComposeNode(context.Context, *emptypb.Empty) (*ComposeNodeResponse, error)
	GetNetworkMap(context.Context, *emptypb.Empty) (*NetworkMapResponse, error)
	ConnectNetworkMapTable(grpc.BidiStreamingServer[NetworkMapResponse, NetworkMapResponse]) error
}

// UnimplementedNodeServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeServiceServer struct{}

func (UnimplementedNodeServiceServer) ComposeNode(context.Context, *emptypb.Empty) (*ComposeNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComposeNode not implemented")
}
func (UnimplementedNodeServiceServer) GetNetworkMap(context.Context, *emptypb.Empty) (*NetworkMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkMap not implemented")
}
func (UnimplementedNodeServiceServer) ConnectNetworkMapTable(grpc.BidiStreamingServer[NetworkMapResponse, NetworkMapResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ConnectNetworkMapTable not implemented")
}
func (UnimplementedNodeServiceServer) testEmbeddedByValue() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_ComposeNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).ComposeNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_ComposeNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).ComposeNode(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_GetNetworkMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetNetworkMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_GetNetworkMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetNetworkMap(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_ConnectNetworkMapTable_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServiceServer).ConnectNetworkMapTable(&grpc.GenericServerStream[NetworkMapResponse, NetworkMapResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodeService_ConnectNetworkMapTableServer = grpc.BidiStreamingServer[NetworkMapResponse, NetworkMapResponse]

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComposeNode",
			Handler:    _NodeService_ComposeNode_Handler,
		},
		{
			MethodName: "GetNetworkMap",
			Handler:    _NodeService_GetNetworkMap_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectNetworkMapTable",
			Handler:       _NodeService_ConnectNetworkMapTable_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "runetale/runetale/v1/node.proto",
}
